#textdomain wesnoth-Revenge_of_the_Rogue

# This file _main.cfg is the only campaign file read directly by the wesnoth engine.
# It includes commands telling something to the engine. A line starting with # is a comment (it is ignored by the engine) unless one of a limited amount of special words follows.

# The textdomain tells the engine where to look for translations.
[textdomain]
	name="wesnoth-RotR"
	path="data/add-ons/Revenge_of_the_Rogue/translations"
[/textdomain]

# Use the translation files from this campaign's /translations subdirectory for this file:
# textdomain wesnoth-RotR

# (The following line is a command for wmllint (a developer tool).)
# wmllint: directory spelling ASC

[campaign]
    id=Revenge_of_the_Rogue # Needed to connect savefiles with their campaign.
    name=_ "Revenge of the Rogue" # Displayed name to the user.
    abbrev=_"RotR" # Abbreviation used in savefiles.
    define=REVENGE_OF_THE_ROGUE # This preprocessor symbol is defined once the player chooses to play the campaign. It needs to exactly match the symbol which is queried for below.

    difficulties=EASY,NORMAL,HARD # Which various difficulties the campaign shall have. These are preprocessor symbols which do at first nothing. The player selects which one of these gets defined when starting the campaign. You can use them in your code to enable/disable certain things with (e.g.) #idef HARD #else #endif clauses.
    difficulty_descriptions=_"&units/human-outlaws/thief-attack.png=Easy;*&units/human-outlaws/rogue-attack.png=Medium;&units/human-outlaws/assassin-melee-2-2.png=Difficult" # sets up the difficulties selection menu

    # In the following line is an example of how to reference campaign-specific images from outside a campaign's #ifdef clause (see below). In MANY user-made content you will find a so-called "external" or "public" binary path. This is a [binary_path] tag (see below) placed outside of the #ifdef clause (see below) of the add-on, and is not neccessary, and even very bad since by that you make images publicly available. (This situation is due to an ancient bug.)
    icon=units/human-outlaws/ranger.png~RC(magenta>blue) # image in the campaign list
    image=portraits/elves/sorceress.png # campaign image right of the campaign list when selected
    description=_ "After fleeing from an Orc horde, the former residents of a northern mountain city have been living as thieves and outlaws. Now under Edwin, the son of the last Steward, the ragtag group of outcasts are ready to retake their home."

    first_scenario=01_The_Pine_Forest # Scenario that gets chosen first from the scenario list. It looks for a scenario with this id, not with this filename.
[/campaign]

# Enter the following code block only if the player has chosen to play the campaign, thus preventing overwrite conflicts and speeding wesnoth up during startup:
#ifdef REVENGE_OF_THE_ROGUE

# Makes images, sounds and music available as subpaths of the .../Revenge_of_the_Rogue/images/, /Revenge_of_the_Rogue/sounds/ and /Revenge_of_the_Rogue/music/ (create it if needed) directories.
[binary_path]
    path=data/add-ons/Revenge_of_the_Rogue/
[/binary_path]

# {filepath} loads all files from filepath. The contents of these directories are inserted at this point. wesnoth doesn't care how you name your directories and files, your directory- and filenames only need to match the way you include them.
# ~ tells to look in the userdata directory, otherwise the wesnoth engine would look in the main data directory.
# The order of these commands is important. Macros, which can be defined in ~add-ons/Revenge_of_the_Rogue/macros or in ~add-ons/Revenge_of_the_Rogue/utils, are needed in the scenarios, thus they must be read previously to the scenarios.
{~add-ons/Revenge_of_the_Rogue/macros}
{~add-ons/Revenge_of_the_Rogue/utils}

{~add-ons/Revenge_of_the_Rogue/scenarios}
# +units: Perform this command in that [units] tag which was read last - a tag in the wesnoth main data directory (I suppose...) and thus add custom units to the units known by the wesnoth engine.
[+units]
    {~add-ons/Revenge_of_the_Rogue/units}
    {~add-ons/Revenge_of_the_Rogue/units/humans}
    {~add-ons/Revenge_of_the_Rogue/units/dark_elves}
    {~add-ons/Revenge_of_the_Rogue/units/mechanical}
[/units]
# read custom terrain definitions and according terrain graphics so that they're known in the scenario
#{~add-ons/Revenge_of_the_Rogue/terrain}

#endif

# the following clause is entered if the wesnoth map editor is started (independently from whether the campaign is played) - so the custom terrain will be available there too
# The warning which is displayed when hovering over the terrain icon corresponds to the needed [terrain] and [terrain_graphics] tags. So when your addon has these two and includes them like it is done in this _main.cfg, you have "fixed" the warning.
#ifdef EDITOR
#{~add-ons/Revenge_of_the_Rogue/terrain}
# the campaign's binary path is needed since [terrain_graphics] references custom images
[binary_path]
    path=data/add-ons/Revenge_of_the_Rogue/
[/binary_path]
# define an icon under which the custom terrain appears in the map editor
[editor_group]
    id=sc
    name= _ "Revenge of the Rogue"
	icon="group_custom"
[/editor_group]
#endif
